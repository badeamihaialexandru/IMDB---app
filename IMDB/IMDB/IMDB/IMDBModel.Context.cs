//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IMDB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IMDBEntities : DbContext
    {
        public IMDBEntities()
            : base("name=IMDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Actori> Actoris { get; set; }
        public virtual DbSet<Filme> Filmes { get; set; }
        public virtual DbSet<Genuri> Genuris { get; set; }
        public virtual DbSet<Premii> Premiis { get; set; }
        public virtual DbSet<Regizori> Regizoris { get; set; }
        public virtual DbSet<Relatie_actor_film> Relatie_actor_film { get; set; }
        public virtual DbSet<Relatie_Actori_Premii> Relatie_Actori_Premii { get; set; }
        public virtual DbSet<Relatie_Filme_Premii> Relatie_Filme_Premii { get; set; }
        public virtual DbSet<Seriale> Seriales { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WatchList> WatchLists { get; set; }
        public virtual DbSet<YourRating> YourRatings { get; set; }
        public virtual DbSet<AllActionMovy> AllActionMovies { get; set; }
        public virtual DbSet<AllComedyMovy> AllComedyMovies { get; set; }
        public virtual DbSet<AllDramaMovy> AllDramaMovies { get; set; }
        public virtual DbSet<AllAdventureMovy> AllAdventureMovies { get; set; }
        public virtual DbSet<AllAnimationMovy> AllAnimationMovies { get; set; }
        public virtual DbSet<AllBiographyMovy> AllBiographyMovies { get; set; }
        public virtual DbSet<AllCrimeMovy> AllCrimeMovies { get; set; }
        public virtual DbSet<AllDocumentaryMovy> AllDocumentaryMovies { get; set; }
        public virtual DbSet<AllFamilyMovy> AllFamilyMovies { get; set; }
        public virtual DbSet<AllFantasyMovy> AllFantasyMovies { get; set; }
        public virtual DbSet<AllFilmNoirMovy> AllFilmNoirMovies { get; set; }
        public virtual DbSet<AllHistoryMovy> AllHistoryMovies { get; set; }
        public virtual DbSet<AllHorrorMovy> AllHorrorMovies { get; set; }
        public virtual DbSet<AllMisteryMovy> AllMisteryMovies { get; set; }
        public virtual DbSet<AllMusicalMovy> AllMusicalMovies { get; set; }
        public virtual DbSet<AllMusicMovy> AllMusicMovies { get; set; }
        public virtual DbSet<AllRomanceMovy> AllRomanceMovies { get; set; }
        public virtual DbSet<AllSFMovy> AllSFMovies { get; set; }
        public virtual DbSet<AllSportMovy> AllSportMovies { get; set; }
        public virtual DbSet<AllThrillerMovy> AllThrillerMovies { get; set; }
        public virtual DbSet<AllWarMovy> AllWarMovies { get; set; }
        public virtual DbSet<AllWesternMovy> AllWesternMovies { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
